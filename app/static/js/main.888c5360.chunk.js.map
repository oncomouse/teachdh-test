{"version":3,"sources":["components/Categories.js","components/Questions.js","components/SearchBar.js","App.js","serviceWorker.js","index.js"],"names":["getCategories","pipe","pluck","flatten","uniq","Categories","props","data","current","setCurrent","useState","categories","setCategories","useEffect","handleCurrent","ev","target","innerText","map","category","i","key","className","onClick","Questions","results","length","question","title","source","rendered_content","SearchBar","pattern","setPattern","type","value","onChange","App","fuse","Fuse","keys","setResults","search","x","item","list","filter","propSatisfies","contains","Boolean","window","location","hostname","match","teachDHData","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qPAMMA,EAAgBC,YAAKC,YAAM,cAAeC,IAASC,KA4B1CC,EA1BI,SAACC,GAAW,IAE3BC,EAGED,EAHFC,KACAC,EAEEF,EAFFE,QACAC,EACEH,EADFG,WAJ0B,EASQC,mBAAS,IATjB,mBASrBC,EATqB,KASTC,EATS,KAU5BC,qBAAU,WACRD,EAAcZ,EAAcO,MAC3B,CAACA,IAGJ,IAAMO,EAAgB,SAACC,GACrBN,EAAWM,EAAGC,OAAOC,YAAcT,GAAkBO,EAAGC,OAAOC,YAGjE,OAAQ,4BACLN,EAAWO,KAAI,SAACC,EAAUC,GAAX,OACd,wBAAIC,IAAKD,EAAGE,UAAWd,IAAYW,EAAW,SAAW,IAAI,4BAAQI,QAAST,GAAgBK,S,iBCDrFK,EAzBG,SAAClB,GAAW,IAE1BC,EAEED,EAFFC,KACAkB,EACEnB,EADFmB,QAGF,OAAQ,kCACe,IAAnBA,EAAQC,OAAenB,EAAOkB,GAASP,KAAI,SAACS,EAAUP,GAAX,OAC3C,6BAASC,IAAKD,GACZ,gCACE,4BAAKO,EAASC,OACd,4BACGD,EAAShB,WAAWO,KAAI,SAACC,EAAUC,GAAX,OACvB,wBAAIC,IAAKD,GAAID,QAInB,8BACE,kBAAC,IAAD,CAAeU,OAAQF,EAASG,0BCV3BC,EATG,SAACzB,GAAW,IAE1B0B,EAEE1B,EAFF0B,QACAC,EACE3B,EADF2B,WAGF,OAAQ,2BAAOC,KAAK,OAAOC,MAAOH,EAASI,SADrB,SAAArB,GAAE,OAAIkB,EAAWlB,EAAGC,OAAOmB,WCiCpCE,EA/BH,SAAC/B,GAAW,IAEpBC,EACED,EADFC,KAEI+B,EAAO,IAAIC,IAAKhC,EAAM,CAC1BiC,KAAM,CACJ,mBACA,WAPiB,EAUS9B,oBAAS,GAVlB,mBAUdF,EAVc,KAULC,EAVK,OAWSC,mBAAS,IAXlB,mBAWde,EAXc,KAWLgB,EAXK,OAYS/B,mBAAS,IAZlB,mBAYdsB,EAZc,KAYLC,EAZK,KAwBrB,OAXApB,qBAAU,WACR4B,EAAWH,EAAKI,OAAOV,GAASd,KAAI,SAAAyB,GAAC,OAAIA,EAAEC,WAC1C,CAACZ,IACJnB,qBAAU,WAlBW,IAACgC,EAAM1B,EAoBxBsB,GADc,IAAZjC,GAAiC,KAAZwB,EACZ,IApBOa,EAsBQtC,EAtBFY,EAsBQX,EAtBKsC,YAAOC,YAAcC,YAAS7B,GAAW,cAAe0B,OAwB9F,CAACrC,IAEI,6BACN,kBAAC,EAAD,CAAYD,KAAMA,EAAMC,QAASA,EAASC,WAAYA,IACtD,kBAAC,EAAD,CAAWuB,QAASA,EAASC,WAAYA,IACzC,kBAAC,EAAD,CAAW1B,KAAMA,EAAMkB,QAASA,MCxBhBwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbN,IAA0B9C,IASP2C,OAAOI,YATSC,IAASC,OAC1C,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,CAAKlD,KAAMA,KAEbmD,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.888c5360.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport {flatten, pipe, pluck, uniq} from 'ramda';\n\n// 1) Grab the categories key from each object in the array\n// 2) Flatten the resulting array (remove nesting)\n// 3) Remove non-unique values\nconst getCategories = pipe(pluck('categories'), flatten, uniq);\n\nconst Categories = (props) => {\n  const {\n    data,\n    current,\n    setCurrent,\n  } = props;\n\n  // We use state to track categories so we only have to calculate it when \n  // categories changes (which should only happen at load):\n  const [categories, setCategories] = useState([]);\n  useEffect(() => {\n    setCategories(getCategories(data))\n  }, [data])\n\n  // Event handler for when current is changed:\n  const handleCurrent = (ev) => {\n    setCurrent(ev.target.innerText === current ? false : ev.target.innerText);\n  }\n\n  return (<ul>\n    {categories.map((category, i) => (\n      <li key={i} className={current === category ? 'active' : ''}><button onClick={handleCurrent}>{category}</button></li>\n    ))}\n  </ul>)\n}\n\nexport default Categories;\n","import React from 'react';\nimport ReactMarkdown from 'react-markdown';\n\nconst Questions = (props) => {\n  const {\n    data,\n    results,\n  } = props;\n\n  return (<section>\n    {(results.length === 0 ? data : results).map((question, i) => (\n      <article key={i}>\n        <header>\n          <h1>{question.title}</h1>\n          <ul>\n            {question.categories.map((category, i) => (\n              <li key={i}>{category}</li>\n            ))}\n          </ul>\n        </header>\n        <main>\n          <ReactMarkdown source={question.rendered_content} />\n        </main>\n      </article>\n    ))}\n  </section>);\n}\n\nexport default Questions;\n","import React from 'react';\n\nconst SearchBar = (props) => {\n  const {\n    pattern,\n    setPattern\n  } = props;\n  const handlePattern = ev => setPattern(ev.target.value);\n  return (<input type=\"text\" value={pattern} onChange={handlePattern} />);\n}\n\nexport default SearchBar;\n","import React, {useState, useEffect} from 'react';\nimport Fuse from 'fuse.js';\nimport {contains, filter, propSatisfies} from 'ramda';\nimport Categories from './components/Categories';\nimport Questions from './components/Questions';\nimport SearchBar from './components/SearchBar';\n\nconst filterCategory = (list, category) => filter(propSatisfies(contains(category), 'categories'), list)\n\nconst App = (props) => {\n  const {\n    data\n  } = props;\n  const fuse = new Fuse(data, {\n    keys: [\n      'rendered_content',\n      'title',\n    ]\n  });\n  const [current, setCurrent] = useState(false);\n  const [results, setResults] = useState([]);\n  const [pattern, setPattern] = useState('');\n  useEffect(() => {\n    setResults(fuse.search(pattern).map(x => x.item));\n  }, [pattern]);\n  useEffect(() => {\n    if (current === false && pattern === '') {\n      setResults([]);\n    } else {\n      setResults(filterCategory(data, current))\n    }\n  }, [current])\n\n  return (<div>\n    <Categories data={data} current={current} setCurrent={setCurrent} />\n    <SearchBar pattern={pattern} setPattern={setPattern} />\n    <Questions data={data} results={results} />\n  </div>);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst startApplication = (data) => ReactDOM.render(\n  <React.StrictMode>\n    <App data={data} />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nif (process.env.NODE_ENV === 'production') {\n  startApplication(window.teachDHData)\n} else {\n  import('./testData').then((data) => startApplication(data.default))\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}